@page "/CreatePost"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using client.Model;

@inject HttpClient http
@attribute [Authorize]



<h3>Create Post</h3>

<EditForm Model="@Post" OnValidSubmit="@AddPost">
    <DataAnnotationsValidator />
    <div class="title-field">
        <label tile="The title of your project">Title:</label><br>
        <input @bind="newTitle" placeholder="Project in ..." style="width: 340px;" /><br>
        <ValidationMessage For="@(() => Post.Title)" />
    </div>
    <div class="text-field">
        <label for="Description" title="A description of what the project entails">Description:</label><br>
        <InputTextArea @bind-Value="newDescription" placeholder="Description" rows="4" cols="40" /><br>
        <ValidationMessage For="@(() => Post.Description)" />
    </div>

    <div class="newKeyword-field">
        <label for="ckeyword" title="Write your own keyword for your project">Create your own keyword</label><br>
        <input @bind="newKeywordName" placeholder="Keywords" style="width: 340px;" /><br>
        <div class="keyword-button">
            <button @onclick="AddKeyword">Add Keyword</button>
        </div>
    </div>


    <div class="keyword-select">
        <label for="keyword">Keywords:</label><br>
        <select @onchange="SelectedKeywordsChanged" class="Keyword" multiple="multiple" style="width: 340px;">
            @if (KeywordDTOs == null)
            {
                <p>No keywords found</p>
            }
            else
                @foreach (var keyword in KeywordDTOs)
                {
                    <option value="@keyword.Id">@keyword.Name</option>
                }
        </select><br>
    </div>


</EditForm>

<div class="submit-button">
    <button @onclick="AddPost">Post project</button>
</div>

@if (_showsuccess)
{
    <blockquote class="showSuccess">
        <strong>Create Post Saved Successfully!</strong>
    </blockquote>
}


@code {
    PostCreateDTO Post = new();
    KeywordDTO[]? KeywordDTOs;
    int[] selectedKeywordIds = new int[] { };
    private string? newDescription;
    private string? newTitle;
    bool _showsuccess = false;
    private string? newKeywordName;

    void SelectedKeywordsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var intermediary = (string[])e.Value;
            selectedKeywordIds = Array.ConvertAll(intermediary, s => int.Parse(s));
        }
    }

    KeywordDTO[] ConvertSelectedKeywords()
    {
        int n = selectedKeywordIds.Length;
        if (n == 0) return new KeywordDTO[]{};

        var result = new KeywordDTO[n];
        for (int i = 0; i < n; i++)
        {
            result[i] = Array.Find(KeywordDTOs, kw => kw.Id == selectedKeywordIds[i]);
        }

        return result;

    }


    private async Task AddPost()
    {

        KeywordDTO[] kDTOs = ConvertSelectedKeywords(); //Array.ConvertAll(selectedKeywordIds, i => new KeywordDTO { Id = });

        var addPost = new PostCreateDTO
        {
            Title = newTitle,
            Description = newDescription,
            Created = DateTime.UtcNow,
            Status = "Proposed Project",
            Keywords = kDTOs
        };

        var response = await http.PostAsJsonAsync("https://localhost:7081/Post", addPost);

        if (response.IsSuccessStatusCode)
        {
            _showsuccess = true;
        }
    }

    private async Task AddKeyword()
    {
        var addItem = new KeywordCreateDTO { Name = newKeywordName };
        await http.PostAsJsonAsync("https://localhost:7081/Keyword", addItem);

    }

    protected override async Task OnInitializedAsync() =>
    KeywordDTOs = await http.GetFromJsonAsync<KeywordDTO[]>("https://localhost:7081/Keyword");

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }
}



<style>
    .submit-button {
        margin-top: 10px;
    }

    .showSuccess {
        border-style: 2px dotted lightgreen;
        border-left: 2px solid lightgreen;
        background-color: hsla(120, 60%, 70%, 0.3);
        display: inline-block;
        margin-top: 20px;
    }
</style>
